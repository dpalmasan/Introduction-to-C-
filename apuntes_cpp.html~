
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Apuntes C++</title>
    <style>
      p {
        text-align:justify;
        padding: 0 600px 0 0px;
      }
      li {
        text-align:justify;
        padding: 0 600px 0 0px;
      }
    </style>
  </head>

  <body>
    <h1>Module 1</h1>
    <p> A C++ program has a very specific structure in terms of how the code is written and some key elements
 that you use in your C++ programs. The simplest of C++ programs is shown here. </p>

<pre style='color:#000000;background:#ffffff;'><span style='color:#004a43; '>#</span><span style='color:#004a43; '>include </span><span style='color:#800000; '>&lt;</span><span style='color:#40015a; '>iostream</span><span style='color:#800000; '>></span>
<span style='color:#800000; font-weight:bold; '>int</span> <span style='color:#400000; '>main</span><span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
<span style='color:#800080; '>{</span>
    <span style='color:#666616; '>std</span><span style='color:#800080; '>::</span><span style='color:#603000; '>cout</span> <span style='color:#808030; '>&lt;</span><span style='color:#808030; '>&lt;</span> <span style='color:#800000; '>"</span><span style='color:#0000e6; '>Hello World!</span><span style='color:#800000; '>"</span><span style='color:#800080; '>;</span>
    <span style='color:#800000; font-weight:bold; '>return</span> <span style='color:#008c00; '>0</span><span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>
</pre>
  
  <p>In this simple program we notice some elements listed. The line numbers are used for reference only and are not part of the program code.</p>

  <p><b>Line 1</b>: this is known as a pre-processor directive. it instructs the compiler to locate the file that contains code for a library known as iostream. This library contains code that allows for input and output to streams, such as the console window.</p>

  <p><b>Line 2</b>: Every C++ program must have a method known as main(). It is referred to as the entry point for the application when you start execution of the program on your computer. The int portion is the return type of the method. The empty parentheses () after the method name indicate that this a method and that it takes no arguments, in other words, there are no parameters for passing in values.</p>

  <p><b>Line 3</b>: Method bodies in C++ start with an open curly brace.</p>

  <p><b>Line 4</b>: This code uses a method known as cout (pronounced "see out") to send the text Hello World! to the console for output and display. The std:: prefix to this command is a way of indicating that cout is part of a namespace known as std. The :: is is used to indicate that cout is part of the std namespace.</p>

  <p>Also notice that the line ends with a semi-colon. C++ statements are terminated with semi-colons.</p>

  <p><b>Line 5</b>: The return statement is used to end a function or method when a value is expected to be sent back to a caller. In this case, the caller is the operating system and the value returned is an integer value of 0. If the program reaches this statement, returning a value of 0 is an indication to the operating system that the code executed successfully. In the past, programmers would return 0 to indicate successful execution and non-zero values to indicated that an error had occurred in the program somewhere.</p>

  <p><b>Line 6</b>: This line closes out the body of the function main() and is necessary so the compiler knows where the function or method ends, but is also used for other purposes that will be covered later in the course on variable scope and visibility.</p>
  </body>

  <h2>Portability, Compiling, and Linking</h2>
  <p>Writing code in multiple languages as a way to have your applications execute on multiple platforms or different operating systems can take a considerable amount of time resulting in duplication of effort. Application portability may not be a requirement for all software applications but what if portability is required? So, what exactly is portability or the ability to execute on multiple platforms?</p>

  <p>Primarily, portability refers to the process of compiling your code, without major changes, across different compilers or different platforms. Platforms typically mean computer hardware, operating systems, CPU architectures, or device form factors. Compilers refer to the process of turning your code into executable form. Each platform or operating system may have different compilers available from different providers such as Microsoft, Intel, or Oracle.</p>

  <h3>The Compilation Process</h3>
  <ol>
    <li>Preprocessor</li>
    <ul>
      <li>Takes your C++ source code and evaluates preprocessor directives.</li>
      <li>Produces a preprocessed source file (but usually is just part of the compiler.</li>
    </ul>
    <li>Compiler</li>
    <ul>
      <li>Takes preprocessed source code, compiles into object files.</li>
      <li>Checks that your code conforms to all syntax and semantic rules (e.g., no type errors).</li>
      <li>Accept promises from the code about things defined in other source files.</li>
    </ul>
    <li>Linker</li>
    <ul>
      <li>Takes object files, links them into an executable program.</li>
      <li>Ensures that all of the promises to the compiler are kept.</li>
    </ul>
  </ol>

  <h3>The role of the linker</h3>
  <p>Once the compiler has completed its tasks, the linker is then invoked. The linker is responsible for taking all the object files, that will be part of the application's executable code, and then links them all together in the application .exe file. At the same time, the linker ensures that all promises of the compiler are kept, during the linking process.</p>

  <p>A an example, if your program makes use of the cout function, that is found in the iostream set of files, the linker will ensure that the necessary code for that function, is included in your .exe file.</p>

  <h3>C++ Fundamentals</h3>
  <p>C++ is a case sensitive language. Case sensitivity means that your keywords and variable declarations must match the case. For example, a C++ keyword for a constant type is const. If you were to type Const or CONST, the compiler would not know that your intention was to use the keyword const.</p>

  <p>Aside from the case sensitivity, C++ also has a defined outline for program code and specific "elements" found in a typical C++ application. These elements consist of:
    <ul>
      <li>Preprocessor directives which are used to have the compiler execute tasks prior to compiling the source code</li>
      <li>using directives which are utilized to indicate which namespaces to include in a source code file</li>
      <li>a function header which consists of a return type, function name, and parameters</li>
      <li>a function body containing the code that performs the actions required of that function</li>
      <li>statements that are contained in the C++ source code file</li>
      <li>comments for documenting the source code for programmers to understand what the code is intended to do</li>
      <li>a return statement that sends data back to the function caller</li>
      <li>curly braces to enclose bodies of statements. Commonly used to denote the body of a function or a flow controls statement such as a for loop</li>
    </ul>
  </p>
  <p>C++ source code also permits judicious use of white space (tabs, spaces, new lines) to create code that is easier to read. The compiler completely ignores the white space, with a small exception concerning if statements that will be covered later. It is highly recommended that you make use of white space to indent and separate lines of code to aid in readability of your source code files.</p>

  <p>A C++ program is comprised of various components such as functions, methods, classes, etc. The instructions that form part of a C++ program typically reside inside of functions or methods. These functions are comprised of C++ statements. You will find yourself using various types of statements in your C++ code as listed here:
    <ul>
      <li>declarations - these are used to declare variables and constants that will be used in your application</li>
      <li>assignments - these are used to assign values to variables in your application code</li>
      <li>preprocessor directives - covered in the topic on Code Formatting</li>
      <li>comments - used to document your code</li>
      <li>function declarations - covered in the topic on Code Formatting</li>
      <li>executable statements - these are used to perform operations and execute instructions. Examples would be cout << "Hello World!"; which outputs Hello World! to the console.</li>
    </ul>
  </p>

</html>


